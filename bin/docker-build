#!/bin/bash

declare -a args
for arg in "$@"; do
	args[${#args[*]}]="$arg"
done

if [ -f .pkg/ENV ]; then
    source .pkg/ENV
elif [ -f .pkg/actions.json ]; then
    env=$(action env)
    if [ $? -gt 0 ]; then
        echo "Has Reactor been installed? https://github.com/srevenant/reactor"
        exit 1
    fi
    eval $env
else
    echo "Missing .pkg/ENV or .pkg/actions.json... https://github.com/srevenant/docker-tools"
    exit 1
fi

if [ -z "$DOCKER_IMAGE" ]; then
    echo "No DOCKER_IMAGE defined"
    exit 1
fi

if [ -n "$NO_DOCKER_CACHE" ]; then
	args[${#args[*]}]="--no-cache"
fi

defined=$(printf -- '%s\n' "${args[@]}" | grep -e -f)
if [ $defined ]; then
	echo "-f already defined"
elif [ -f .pkg/Dockerfile ]; then
	args=( "${args[@]}" "-f" ".pkg/Dockerfile" )
elif [ -f Dockerfile ]; then
	args=( "${args[@]}" "-f" "Dockerfile" )
fi

for arg in $DOCKER_ARGS; do
    value=$(eval echo \$$arg)
	args=( "${args[@]}" "--build-arg" "$arg=$value" )
done

for tag in $DOCKER_TAGS; do
	args=( "${args[@]}" "-t" "$DOCKER_IMAGE:$tag" )
done

ver=
if [ -n "$PKG_VERSION" ]; then
    ver="$PKG_VERSION"
elif [ -n "$BUILD_VERSION" ]; then
    ver="$BUILD_VERSION"
fi

if [ -n "$ver" ]; then
    ver=":$ver"
fi

cmd() {
    printf "Execute:\n\n\t"
	space_rx="\s"
	for arg in "$@"; do
        if [[ $arg =~ $space_rx ]]; then
			echo -n ' "'$arg'"'
        else
			echo -n " $arg"
		fi
	done
    echo ""
    "$@"
}

cmd docker build "${args[@]}" -t $DOCKER_IMAGE$ver .

